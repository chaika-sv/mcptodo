# setup_database.py
import sqlite3


def setup_database():
    with sqlite3.connect('tasks.db') as conn:
        cursor = conn.cursor()

        # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
        cursor.execute('PRAGMA foreign_keys = ON')

        # ===== –°–ü–†–ê–í–û–ß–ù–ò–ö–ò =====

        # –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS priorities (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT UNIQUE NOT NULL,
                sort_order INTEGER NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS categories (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT UNIQUE NOT NULL,
                description TEXT,
                color TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å—Ç–∞—Ç—É—Å–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS statuses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT UNIQUE NOT NULL,
                is_completed BOOLEAN DEFAULT FALSE,
                sort_order INTEGER NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # ===== –û–°–ù–û–í–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –ó–ê–î–ê–ß =====
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS tasks (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                title TEXT NOT NULL,
                description TEXT,
                due_date TIMESTAMP,
                priority_id INTEGER DEFAULT 2 REFERENCES priorities(id),
                category_id INTEGER DEFAULT 1 REFERENCES categories(id),
                status_id INTEGER DEFAULT 1 REFERENCES statuses(id),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                started_at TIMESTAMP,
                completed_at TIMESTAMP,
                FOREIGN KEY (priority_id) REFERENCES priorities(id),
                FOREIGN KEY (category_id) REFERENCES categories(id),
                FOREIGN KEY (status_id) REFERENCES statuses(id)
            )
        ''')

        # ===== –ó–ê–ü–û–õ–ù–Ø–ï–ú –°–ü–†–ê–í–û–ß–ù–ò–ö–ò –ë–ê–ó–û–í–´–ú–ò –î–ê–ù–ù–´–ú–ò =====

        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã (sort_order –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏)
        priorities_data = [
            ('low', 1),
            ('normal', 2),
            ('high', 3)
        ]
        cursor.executemany('''
            INSERT OR IGNORE INTO priorities (name, sort_order) VALUES (?, ?)
        ''', priorities_data)

        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories_data = [
            ('general', '–û–±—â–∏–µ –∑–∞–¥–∞—á–∏', '#6B7280'),
            ('work', '–†–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏', '#3B82F6'),
            ('personal', '–õ–∏—á–Ω—ã–µ –¥–µ–ª–∞', '#10B981'),
            ('study', '–û–±—É—á–µ–Ω–∏–µ', '#F59E0B')
        ]
        cursor.executemany('''
            INSERT OR IGNORE INTO categories (name, description, color) VALUES (?, ?, ?)
        ''', categories_data)

        # –°—Ç–∞—Ç—É—Å—ã
        statuses_data = [
            ('todo', False, 1),
            ('in_progress', False, 2),
            ('done', True, 3),
            ('blocked', False, 4)
        ]
        cursor.executemany('''
            INSERT OR IGNORE INTO statuses (name, is_completed, sort_order) VALUES (?, ?, ?)
        ''', statuses_data)

        conn.commit()
        print("Database with reference tables created successfully!")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        cursor.execute("SELECT COUNT(*) FROM priorities")
        priorities_count = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM categories")
        categories_count = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM statuses")
        statuses_count = cursor.fetchone()[0]

        print(f"–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏:")
        print(f"   ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã: {priorities_count}")
        print(f"   ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories_count}")
        print(f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å—ã: {statuses_count}")

        return True


def show_reference_data():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤"""
    with sqlite3.connect('tasks.db') as conn:
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()

        print("\nüéØ –ü–†–ò–û–†–ò–¢–ï–¢–´:")
        cursor.execute("SELECT * FROM priorities ORDER BY sort_order")
        for row in cursor.fetchall():
            print(f"   {row['id']}: {row['name']} (–ø–æ—Ä—è–¥–æ–∫: {row['sort_order']})")

        print("\nüìÅ –ö–ê–¢–ï–ì–û–†–ò–ò:")
        cursor.execute("SELECT * FROM categories ORDER BY name")
        for row in cursor.fetchall():
            print(f"   {row['id']}: {row['name']} - {row['description']} ({row['color']})")

        print("\nüìã –°–¢–ê–¢–£–°–´:")
        cursor.execute("SELECT * FROM statuses ORDER BY sort_order")
        for row in cursor.fetchall():
            completed = "‚úÖ" if row['is_completed'] else "‚è≥"
            print(f"   {row['id']}: {row['name']} {completed}")


if __name__ == "__main__":
    if setup_database():
        show_reference_data()