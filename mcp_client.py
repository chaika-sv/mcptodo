# mcp_client.py
import asyncio
import logging
import os

from dotenv import load_dotenv
from typing import Optional, Dict, Any

from langchain_mcp_adapters.client import MultiServerMCPClient
from langchain_core.messages import HumanMessage
from langgraph.prebuilt import create_react_agent
from langgraph.checkpoint.memory import InMemorySaver

from llm_provider import AgentConfig, ModelFactory, ModelProvider
from task_utils import retry_on_failure

# ==== –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–ï ====
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('mcp_client_llm.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)


class TaskManagerAgent:
    """AI-–∞–≥–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏."""

    def __init__(self, config: AgentConfig):
        self.config = config
        self.agent = None
        self.checkpointer = None
        self.mcp_client = None
        self.tools = []
        self._initialized = False

        logger.info(f"–°–æ–∑–¥–∞–Ω –∞–≥–µ–Ω—Ç —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º: {config.model_provider.value}")

    @property
    def is_ready(self) -> bool:
        return self._initialized and self.agent is not None

    async def initialize(self) -> bool:
        if self._initialized:
            logger.warning("–ê–≥–µ–Ω—Ç —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True

        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞...")

        try:
            # –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self.config.validate()

            # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è mcp –∫–ª–∏–µ–Ω—Ç–∞ (—Å retry)
            await self._init_mcp_client()

            # —Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
            model = ModelFactory.create_model(self.config)

            # —Å–æ–∑–¥–∞–Ω–∏–µ checkpointer (memory)
            if self.config.use_memory:
                self.checkpointer = InMemorySaver()
                logger.info("–ü–∞–º—è—Ç—å –∞–≥–µ–Ω—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∞")

            # —Å–æ–∑–¥–∞–Ω–∏–µ react-–∞–≥–µ–Ω—Ç–∞
            self.agent = create_react_agent(
                model=model,
                tools=self.tools,
                checkpointer=self.checkpointer,
                prompt=self._get_system_prompt()
            )

            self._initialized = True
            logger.info("‚úÖ –ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False

    @retry_on_failure()
    async def _init_mcp_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        self.mcp_client = MultiServerMCPClient(self.config.get_mcp_config())
        self.tools = await self.mcp_client.get_tools()

        if not self.tools:
            raise Exception("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")

        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        for tool in self.tools:
            logger.info(f"  ‚Ä¢ {tool.name}")

    def _get_system_prompt(self) -> str:
        """–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞ ‚Äî –æ—Å—Ç–∞–≤–∏–ª –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ."""
        return (
            "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
            "–í—ã–ø–æ–ª–Ω—è–π –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ—á–Ω–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ. "
            "–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–π —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ. "
            "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö. "
            "–ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –æ–±—ä—è—Å–Ω—è–π –ø—Ä–∏—á–∏–Ω—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π —Ä–µ—à–µ–Ω–∏—è."
            "–ù–µ –≤—ã—á–∏—Å–ª—è–π –¥–∞—Ç—ã —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è (–∑–∞–≤—Ç—Ä–∞, –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ –∏ —Ç.–ø.), —Ç–æ –≤ –ø–æ–ª–µ –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è–π —ç—Ç–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –µ—Å—Ç—å."
        )

    @retry_on_failure()
    async def process_message(self, user_input: str, thread_id: str = "default") -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ react-–∞–≥–µ–Ω—Ç–∞ (ainvoke)."""
        if not self.is_ready:
            return "‚ùå –ê–≥–µ–Ω—Ç –Ω–µ –≥–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å."

        try:
            config = {"configurable": {"thread_id": thread_id}}
            message_input = {"messages": [HumanMessage(content=user_input)]}

            response = await self.agent.ainvoke(message_input, config)
            # –æ–∂–∏–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
            return response["messages"][-1].content

        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}"
            logger.error(error_msg)
            return error_msg

    def get_status(self) -> Dict[str, Any]:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞ (–¥–ª—è –∫–æ–º–∞–Ω–¥—ã status)."""
        return {
            "initialized": self._initialized,
            "model_provider": self.config.model_provider.value,
            "memory_enabled": self.config.use_memory,
            "tools_count": len(self.tools)
        }


class InteractiveChat:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç."""

    def __init__(self, agent: TaskManagerAgent):
        self.agent = agent
        self.thread_id = "main"

    def get_user_input(self) -> Optional[str]:
        try:
            user_input = input("\n> ").strip()

            if user_input.lower() in ['quit', 'exit', '–≤—ã—Ö–æ–¥']:
                return None
            elif user_input.lower() == 'clear':
                self.thread_id = f"thread_{asyncio.get_event_loop().time()}"
                print("üí≠ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")
                return ""
            elif user_input.lower() == 'status':
                status = self.agent.get_status()
                print(f"üìä –°—Ç–∞—Ç—É—Å: {status}")
                return ""
            elif not user_input:
                return ""

            return user_input

        except (KeyboardInterrupt, EOFError):
            return None

    async def run(self):
        print("ü§ñ AI-–∞–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! (quit –¥–ª—è –≤—ã—Ö–æ–¥–∞, status –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞, clear –¥–ª—è –æ—á–∏—Å—Ç–∫–∏)")

        while True:
            user_input = self.get_user_input()

            if user_input is None:
                break
            elif user_input == "":
                continue

            response = await self.agent.process_message(user_input, self.thread_id)
            print(f"\n{response}")

        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")


async def main():
    load_dotenv()

    try:
        config = AgentConfig(
            model_provider=ModelProvider(os.getenv("MODEL_PROVIDER", "openrouter"))
        )

        agent = TaskManagerAgent(config)

        if not await agent.initialize():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–≥–µ–Ω—Ç–∞")
            return

        chat = InteractiveChat(agent)
        await chat.run()

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

    logger.info("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")


if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
